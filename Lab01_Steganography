 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1><center>CS356 Lab 1 <br /><br />Introduction to Steganography\n",
    "<br/><br/>How to Hide Secrets in Plain Sight</center></h1>\n",
    "\n",
    "### Overview\n",
    "\n",
    "This lab is intended to serve multiple purposes:\n",
    "\n",
    "* Teach you how to use a jupyter notebook\n",
    "* Show you how steganography works\n",
    "* and have some fun!\n",
    "\n",
    "In the course of this lab you will experiment with hiding secrets within photographic images.  You will first examine a photograph that already has data encoded within it.  You will then create your own secret message and encode them within a picture of your choice.\n",
    "\n",
    "When you finish this assignment, you must turn in your results to Canvas as described at the end of this notebook.\n",
    "\n",
    "#### Acknowledgements and Citations\n",
    "\n",
    "This jupyter notebook is based on the geeks-for-geeks web tutorial https://www.geeksforgeeks.org/image-based-steganography-using-python/, modified to be used in a Jupyter Notebook, and augmented with original source material by Dr. Joseph Gersch for the CS356 cyber-security course at Colorado State University.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "\n",
    "### Image based Steganography using Python\n",
    "\n",
    "Steganography is the method of hiding secret data in any image/audio/video. In a nutshell, the main motive of steganography is to hide the intended information within any image/audio/video that doesn’t appear to be secret just by looking at.\n",
    "\n",
    "Take a look at the two pictures of your friendly neighborhood professor shown below. One of these two photos has a reasonably large document encoded within it. Do you see any differences between the two photos?  I don't, but maybe you have better eyes than I do.  **Right-click on each photo and save them to the current working directory containing this Jupyter notebook.**\n",
    "\n",
    "<img src=\"http://www.cs.colostate.edu/~gersch/cs356/jupyter/images/JoePhoto1.png\" alt=\"Dr. Evil\" />\n",
    "\n",
    "<img src=\"http://www.cs.colostate.edu/~gersch/cs356/jupyter/images/JoePhoto2.png\" alt=\"Dr. Nice\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "\n",
    "### How does steganography work?\n",
    "\n",
    "The idea behind image-based steganography is very simple. Images are composed of digital data (pixels) which describes what’s inside the picture, usually the colors of all the pixels. Every image is made up of pixels and every pixel contains 3 values (red, green, blue).  There are lots of ways to encode a text message into these pixels.  Let's use a simple algorithm in this notebook. \n",
    "\n",
    "#### Encode the data :\n",
    "\n",
    "Every byte of data to be encoded is converted to its 8-bit binary code using ASCII values. Pixels are read from left to right in groups of 3. Thus, we have a total of 9 values. The first 8 values are used to store the eight successive bits of the binary data. The value is made odd if we wish to encode a bit value of 1;  otherwise it is made even to encode a bit value of 0.  The 9th value is made even to indicate \"stop, this is the end of the message\"  or odd to indicate \"continue, there is more to the message\".  \n",
    "\n",
    "#### For example:\n",
    "\n",
    "Suppose the message to be hidden is \"Hii\". This message contains 3-bytes, therefore, 9  pixels are required to encode the data since 3 x 3 = 9. Consider a tiny 4 x 3 image with a total of 12-pixels.  This is large enough to encode the given data.  Here are the original values for the 12 pixels:\n",
    "\n",
    "```\n",
    "[(27, 64, 164), (248, 244, 194), (174, 246, 250), (149, 95, 232),\n",
    "(188, 156, 169), (71, 167, 127), (132, 173, 97), (113, 69, 206),\n",
    "(255, 29, 213), (53, 153, 220), (246, 225, 229), (142, 82, 175)]\n",
    "```\n",
    "\n",
    "Let's look at the first character to encode.  The ASCII value of \"H\" is 72 whose binary equivalent is `01001000`.\n",
    "\n",
    "We now take the first 3-pixels `(27, 64, 164), (248, 244, 194), (174, 246, 250)` to encode. Change each pixel to odd to encode a 1 bit and even to encode a 0. Upon completion, the modified pixels are `(26, 63, 164), (248, 243, 194), (174, 246, 250)`. Since we have to encode more data, therefore, the last value should be even. Similarly, each of the ‘i‘ values can be encoded in this image.\n",
    "\n",
    "The fully encoded new image will look like :\n",
    "\n",
    "```\n",
    "[(26, 63, 164), (248, 243, 194), (174, 246, 250), (148, 95, 231),\n",
    "(188, 155, 168), (70, 167, 126), (132, 173, 97), (112, 69, 206),\n",
    "(254, 29, 213), (53, 153, 220), (246, 225, 229), (142, 82, 175)]\n",
    "```\n",
    "\n",
    "#### Decode the data :\n",
    "\n",
    "To decode, three pixels are read at a time, until the last value is odd, which means the message is over. Every 3-pixels contain a binary data, which can be extracted by the same encoding logic. If the value if odd the binary bit is 1 else 0."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "\n",
    "### A ridiculously quick overview of Jupyter Notebooks\n",
    "\n",
    "As you have probably noticed by now, there are a number of \"cells\" in this notebook.  Each cell can contain rich-format text encoded in the \"Markdown\" language; otherwise the cell can contain python code that can be executed by the Jupyter notebook's built-in interactive python (IPython) interpreter.\n",
    "\n",
    "#### Markdown and HTML\n",
    "\n",
    "To view the **markdown** data in this cell, either double-click on it, or simply press *return* (*enter* on some keyboards). To go back to rich-formatting, you must execute the cell contents by pressing *shift-return*.\n",
    "\n",
    "A **markdown** cell can contain pure markdown encoding.  Additionally, HTML markups can also be embedded into the cell.  See the very top cell in this notebook for an example.\n",
    "\n",
    "For a quick tutorial on markdown, see [Markdown Summary and Cheat-Sheet](https://www.markdownguide.org/getting-started).\n",
    "\n",
    "#### Python cells\n",
    "\n",
    "Each Python cell can be executed by pressing *shift-return*.  You will notice that the status indicator to the left of the cell (e.g. \"`In [ ]`\") may convert to \"`In [*]`\" while executing, and finally to \"`In [n]`\" (where `n` is an integer) when the cell has completed executing.\n",
    "\n",
    "Let's practice by executing the code cells for the steganography program below.\n",
    "\n",
    "Click on the following cell, then press *shift-return* to execute the python contents of the cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Python program implementing Image Steganography \n",
    "\n",
    "# PIL module is used to extract \n",
    "# pixels of image and modify it \n",
    "from PIL import Image "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Congratulations!  You just executed one line of python and imported the Image Processing Library.  Jupyter notebooks are singly-threaded, so you can continue this program in subsequent cells.  \n",
    "\n",
    "(Note: if you ever need to restart from scratch, use the **kernel** menu item in the menu bar above to *restart and clear all output*, then begin executing cells in the correct order again.)\n",
    "\n",
    "The next cell contains several python routines for encoding data into an image.\n",
    "\n",
    "Click on the next cell and press *shift-return*.  You will notice nothing much happens, but the routines have been created and are ready for execution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Convert encoding data into 8-bit binary \n",
    "# form using ASCII value of characters \n",
    "\n",
    "def genData(data): \n",
    "\t\t\n",
    "\t\t# list of binary codes \n",
    "\t\t# of given data \n",
    "\t\tnewd = [] \n",
    "\t\t\n",
    "\t\tfor i in data: \n",
    "\t\t\tnewd.append(format(ord(i), '08b')) \n",
    "\t\treturn newd \n",
    "        \n",
    "# Pixels are modified according to the \n",
    "# 8-bit binary data and finally returned\n",
    "\n",
    "def modPix(pix, data): \n",
    "\t\n",
    "\tdatalist = genData(data) \n",
    "\tlendata = len(datalist) \n",
    "\timdata = iter(pix) \n",
    "\n",
    "\tfor i in range(lendata): \n",
    "\t\t\n",
    "\t\t# Extracting 3 pixels at a time \n",
    "\t\tpix = [value for value in imdata.__next__()[:3] +\n",
    "\t\t\t\t\t\t\t\timdata.__next__()[:3] +\n",
    "\t\t\t\t\t\t\t\timdata.__next__()[:3]] \n",
    "\t\t\t\t\t\t\t\t\t\n",
    "\t\t# Pixel value should be made \n",
    "\t\t# odd for 1 and even for 0 \n",
    "\t\tfor j in range(0, 8): \n",
    "\t\t\tif (datalist[i][j]=='0') and (pix[j]% 2 != 0): \n",
    "\t\t\t\t\n",
    "\t\t\t\tif (pix[j]% 2 != 0): \n",
    "\t\t\t\t\tpix[j] -= 1\n",
    "\t\t\t\t\t\n",
    "\t\t\telif (datalist[i][j] == '1') and (pix[j] % 2 == 0): \n",
    "\t\t\t\tpix[j] -= 1\n",
    "\t\t\t\t\n",
    "\t\t# Eigh^th pixel of every set tells \n",
    "\t\t# whether to stop ot read further. \n",
    "\t\t# 0 means keep reading; 1 means the \n",
    "\t\t# message is over. \n",
    "\t\tif (i == lendata - 1): \n",
    "\t\t\tif (pix[-1] % 2 == 0): \n",
    "\t\t\t\tpix[-1] -= 1\n",
    "\t\telse: \n",
    "\t\t\tif (pix[-1] % 2 != 0): \n",
    "\t\t\t\tpix[-1] -= 1\n",
    "\n",
    "\t\tpix = tuple(pix) \n",
    "\t\tyield pix[0:3] \n",
    "\t\tyield pix[3:6] \n",
    "\t\tyield pix[6:9] \n",
    "\n",
    "def encode_enc(newimg, data): \n",
    "\tw = newimg.size[0] \n",
    "\t(x, y) = (0, 0) \n",
    "\t\n",
    "\tfor pixel in modPix(newimg.getdata(), data): \n",
    "\t\t\n",
    "\t\t# Putting modified pixels in the new image \n",
    "\t\tnewimg.putpixel((x, y), pixel) \n",
    "\t\tif (x == w - 1): \n",
    "\t\t\tx = 0\n",
    "\t\t\ty += 1\n",
    "\t\telse: \n",
    "\t\t\tx += 1\n",
    "\t\t\t\n",
    "            \n",
    "# Encode data into image \n",
    "def encode(): \n",
    "\timg = input(\"Enter image name(with extension): \") \n",
    "\timage = Image.open(img, 'r') \n",
    "\t\n",
    "\tdata = input(\"Enter data to be encoded : \") \n",
    "\tif (len(data) == 0): \n",
    "\t\traise ValueError('Data is empty') \n",
    "\t\t\n",
    "\tnewimg = image.copy() \n",
    "\tencode_enc(newimg, data) \n",
    "\t\n",
    "\tnew_img_name = input(\"Enter the name of new image(with extension): \") \n",
    "\tnewimg.save(new_img_name, str(new_img_name.split(\".\")[1].upper())) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's create the routines that decode data from an image.\n",
    "\n",
    "Click on the next cell and press *shift-return*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Decode the data in the image \n",
    "def decode(): \n",
    "\timg = input(\"Enter image name(with extension) :\") \n",
    "\timage = Image.open(img, 'r') \n",
    "\t\n",
    "\tdata = '' \n",
    "\timgdata = iter(image.getdata()) \n",
    "\t\n",
    "\twhile (True): \n",
    "\t\tpixels = [value for value in imgdata.__next__()[:3] +\n",
    "\t\t\t\t\t\t\t\timgdata.__next__()[:3] +\n",
    "\t\t\t\t\t\t\t\timgdata.__next__()[:3]] \n",
    "\t\t# string of binary data \n",
    "\t\tbinstr = '' \n",
    "\t\t\n",
    "\t\tfor i in pixels[:8]: \n",
    "\t\t\tif (i % 2 == 0): \n",
    "\t\t\t\tbinstr += '0'\n",
    "\t\t\telse: \n",
    "\t\t\t\tbinstr += '1'\n",
    "\t\t\t\t\n",
    "\t\tdata += chr(int(binstr, 2)) \n",
    "\t\tif (pixels[-1] % 2 != 0): \n",
    "\t\t\treturn data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We finally get to the MAIN section of code that asks if you want to encode or decode data.  Use *shift-return* to run the MAIN program and provide the appropriate input to the program.\n",
    "\n",
    "You need to run this program twice using *shift-enter* to decode anything that might be contained in the two images you saved earlier.  \n",
    "\n",
    "* `[directory_path_to_file]/JoePhoto1.png`\n",
    "* `[directory_path_to_file]/JoePhoto2.png`\n",
    "\n",
    "Which photo contains the hidden document?  What is the document?  You might be surprised to see how large the document is, given the size of the picture.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "            \n",
    "# Main Function\t\t \n",
    "def main(): \n",
    "\ta = int(input(\":: Welcome to Steganography ::\\n\"\n",
    "\t\t\t\t\t\t\"1. Encode\\n 2. Decode\\n\")) \n",
    "\tif (a == 1): \n",
    "\t\tencode() \n",
    "\t\t\n",
    "\telif (a == 2): \n",
    "\t\tprint(\"Decoded word- \" + decode()) \n",
    "\telse: \n",
    "\t\traise Exception(\"Enter correct input\") \n",
    "\t\t\n",
    "# Driver Code \n",
    "if __name__ == '__main__' : \n",
    "\t\n",
    "\t# Calling main function \n",
    "\tmain() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "\n",
    "### Your assignment\n",
    "\n",
    "Find an image that you like.  It can be a jpeg, png, tiff or gif.  Use the program above to encode the following text which *MUST* include your name as part of the text.  That way the TAs will know that you successfully completed the assignment.  After encoding your text, save the new image as a `png` file.  (jpegs don't work).\n",
    "\n",
    "The text you should encode should be something like:\n",
    "\n",
    "`My name is (your name here) and I have hidden this message in a photographic image`.  \n",
    "\n",
    "Or anything else you wish to encode, as long as your name is included.\n",
    "\n",
    "You might want to double-check that it worked by decoding your steganographic image.  \n",
    "\n",
    "#### What to turn in to CANVAS\n",
    "\n",
    "Create a text file named `solution.txt` describing \n",
    "\n",
    "1) which image contained the document\n",
    "2) the title of the document\n",
    "\n",
    "Create a tarball image that contains both `solution.txt` and your encoded `png` image file.  We will decode the image to make sure you did this correctly.\n",
    "\n",
    "Submit the tarball to canvas.\n",
    "\n",
    "#### Grading\n",
    "\n",
    "This assignment is worth 50 points.  \n",
    " \n",
    "* 20 points for identifying the document\n",
    "* 30 points for correctly embedding text in an image"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
